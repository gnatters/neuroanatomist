Jax.getGlobal()['AssetLoader'] = Jax.Model.create
  after_initialize: ->
    # this model is responsible for finding, fetching and returning requested meshes, regions, descriptions, indexes etc
    # particularly in service of scene and region
    # also responsible for local caching of assets
    # can bundle assets into a single request to the server to reduce overhead
    
    
    
  load_shape_set: ->
    # checks for more recent versions of the shape_set
    # retrieves shapeset.index
    #   this includes the meta_data, and graph of a shape set.
    # also retrieves meshes of the the default region_set of the shape_set, which is specified in the metadata
    
  
  load_meshes: (assets) ->
    
    
  load_regions: (assets) ->
    # there is a large index of regions on the server
    # user creation of regions would be a nice feature, they can then be uploaded and given a universal region id
    
    
    
    
  test_load: () ->
    test_requests = [{type: "shape_set", id:"default", cascade: "yes"}]
    this.load 1,
      {include: [1,2,3], requests: test_requests, cascade: "no"},
      (data, textStatus, jqXHR) -> 
        console.log (data)
  
  load: (shape_set, params, callback) ->
    url = "<%= "/jaxdata" %>/" + shape_set + "?"   #"
    if params["include"] and params["include"].length
      url += "included=" + params["include"]
    else if params["exclude"] and params["exclude"].length
      url += "excluded=" + params["exclude"]
    url += "&requests=" + encodeURIComponent(JSON.stringify(params["requests"]))
    console.log url
    $.ajax
      url: url
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) -> console.log "AJAX Error: #{textStatus}"
      success: (data, textStatus, jqXHR) -> callback(data, textStatus, jqXHR)
