Jax.getGlobal()['AssetLoader'] = Jax.Model.create
  after_initialize: ->
    # this model is responsible for finding, fetching and returning requested meshes, regions, descriptions, indexes etc
    # particularly in service of scene and region
    # also responsible for local caching of assets
    # can bundle assets into a single request to the server to reduce overhead
    
    
    
  load_shape_set: ->
    # checks for more recent versions of the shape_set
    # retrieves shapeset.index
    #   this includes the meta_data, and graph of a shape set.
    # also retrieves meshes of the the default region_set of the shape_set, which is specified in the metadata
    
  
  load_meshes: (assets) ->
    
    
  load_regions: (assets) ->
    # there is a large index of regions on the server
    # user creation of regions would be a nice feature, they can then be uploaded and given a universal region id
    
  
  
  test_fetch: () ->
    test_fetch_params = 0#{shape_set:4, exclude:[13,14], requests: [{type:"shape",id:1,cascade:"yes"}]}
    this.fetch test_fetch_params,
      (data, textStatus, jqXHR) -> console.log (data)
      
  fetch: (params, callback) ->
    # params = {shape_set: #, include:[], exclude:[], cascade:flag, requests: {}}
    url = @jax_data_path
    url += "/" + params.shape_set if params.shape_set
    url += "?" if params.include or params.exclude or params.requests or params.cascade
    if params.include and params.include.length
      url += "include=" + params.include + "&"
    else if params.exclude and params.exclude.length
      url += "exclude=" + params.exclude + "&"
    if params.requests
      url += "requests=" + encodeURIComponent(JSON.stringify(params.requests))
    else if params.cascade
      url += "cascade=" + params.cascade
    console.log url
    $.ajax
      url: url
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) -> console.log "AJAX Error: " + textStatus
      success: (data, textStatus, jqXHR) -> callback(data, textStatus, jqXHR)
