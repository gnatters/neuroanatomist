Jax.getGlobal()['AssetLoader'] = Jax.Model.create
  fetch_start: () -> window.context.current_controller.started_fetching_data()
  fetch_end: (shape_set_id, stores) -> window.context.current_controller.finished_fetching_data(shape_set_id, stores)
  after_initialize: ->
    # create jax asset store
    # all meshes are stripped out of the loaded asset and stored here by id, where region can find them later
    @s3 = window.context.s3 = {}
    @idb = 
      indexedDB:    window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB
      keyRange:     window.IDBKeyRange || window.webkitIDBKeyRange
      db:           null
      ready:        false
      loaded:       false
      config:
        stores:     ["shape_set","meshes","shapes","regions","perspectives","logs"]
        name:       "neuroanatomist"
        version:    "0.0.1"
        key:        "sid"
    $.extend @idb,
      init: (callback) =>
        req = @idb.indexedDB.open @idb.config.name
        req.onsuccess = (e) => 
          @idb.db = idb = e.target.result
          missing_stores = (os for os in @idb.config.stores when !idb.objectStoreNames.contains(os))
          if missing_stores
            vreq = idb.setVersion @idb.config.version
            vreq.onsuccess = (e) => 
              idb.createObjectStore os, { keyPath: @idb.config.key } for os in missing_stores
              @idb.ready = true
              callback()
            vreq.onfailure = () => console.log "ERROR: setVersion failed."; console.log e
          else 
            @idb.ready = true
            callback()
        req.onerror = (e) => console.log "ERROR: Unable to open indexedDB"; console.log e
        @idb.init = { request: () -> req } # effectively making this an anomymous wrapper function but with a callback, because sometimes chrome is weird.
              
      ###
      get: (os, id, success, failure) =>
        request = @idb.indexedDB.open @idb.db
        request.onsuccess = (e) =>
          idb = e.target.result
          if idb.objectStoreNames.contains os
            active_store = idb.transaction([os], "readwrite").objectStore(os)
            get_request = active_store.get id
            get_request.onsuccess = (e) =>
              if e.target.result
                success e.target.result
              else failure
            get_request.onerror = (e) ->
              console.log "ERROR: Unable to retrieve data"
              failure
          else failure
        request.onerror = (e) ->
          console.log "ERROR: Unable to open indexedDB"
          failure
      
      put: (os, new_version, data, idb) =>
        if idb
          if idb.objectStoreNames.contains os
            active_store = idb.transaction([os], "readwrite").objectStore(os)
            put_request = active_store.put data
            put_request.onsuccess = (e) -> console.log "Data stored in indexedDB"
            put_request.error = (e) -> console.log "Error putting data"; console.log e
          else
            version_request = idb.setVersion new_version
            version_request.onsuccess = (e) =>
              active_store = idb.createObjectStore os, { keyPath: "id" }
              put_request = active_store.put data
              put_request.onsuccess = (e) -> console.log "Data stored in indexedDB"
              put_request.error = (e) -> console.log "Error putting data"; console.log e
            version_request.onblocked = (e) -> console.log "Blocked setting version"; console.log e
            version_request.onerror = (e) -> console.log "Error setting version"; console.log e
            version_request.onfailure = (e) -> console.log "Failure setting version"; console.log e
        else
          request = @idb.indexedDB.open @idb.db
          request.onsuccess = (e) =>
            @idb.put os, new_version, data, e.target.result
          request.onerror = (e) -> console.log "ERROR: Unable to open indexedDB"
      ###
      
      dump_s3: (ssid, stores, success, failure) =>
        # cache all assets of the specified shape_set from s3 using a single transaction
        # use one object store per object type and one object per shape_set
        return false unless @s3[ssid = parseInt(ssid)]
        stores = null unless stores.length
        stores = (os for os in (stores or @idb.config.stores) when @idb.db.objectStoreNames.contains(os) and @s3[ssid][os])
        stores = (stores.concat ["shape_set"], stores).uniq()
        t = @idb.db.transaction(stores, "readwrite")
        for os in stores
          active_store = t.objectStore(os)
          data = {}
          data[@idb.config.key] = ssid
          data.type = os
          if os == "shape_set"
            for attr of @s3[ssid]
              continue if attr in @idb.config.stores
              data[attr] = @s3[ssid][attr]
          else if os == "regions" # a region's object cannot be stored in indexedDB so a copy of the region minus is object should be stored instead
            for r of @s3[ssid][os]
              data[r] = {}
              for ri of @s3[ssid][os][r]
                data[r][ri] = @s3[ssid][os][r][ri] unless ri == 'object'
          else 
            $.extend(data, @s3[ssid][os])
          preq = active_store.put data
          preq.onsuccess = (e) -> console.log "Data stored in indexedDB"
          preq.error = (e) -> console.log "Error putting data"; console.log e; failure e if failure
        success e if success            
        undefined
      
      
      load_s3: (ssid, callback, determined=true) =>
        # load all items of the given shape_set from idb into s3
        ssid = parseInt(ssid)
        stores = (os for os in @idb.config.stores when @idb.db.objectStoreNames.contains(os) and os != "logs")
        t = @idb.db.transaction(stores, "readwrite")
        t.oncomplete = callback if callback
        t.onerror = @idb.load_s3(ssid, callback, false) if callback and determined
        for os in stores
          active_store = t.objectStore(os)
          greq = active_store.get ssid
          greq.onsuccess = (e) =>
            return false unless result = e.target.result
            this.init_ss(ssid)
            os = result.type
            delete result['type']
            delete result['ssid']
            if os == "shape_set"
              @s3[ssid][attr] = result[attr] for attr of result
            else
              for id of result
                continue if id == 'sid'
                @s3[ssid][os][id] ?= {} 
                for attr of result[id]
                  @s3[ssid][os][id][attr] = result[id][attr]
          greq.onerror = (e) -> console.log "ERROR: Unable to retrieve data for " + os
        undefined          
      
      load_everything: (callback, determined=true) =>
        return false if @idb.loaded
        stores = (os for os in @idb.config.stores when @idb.db.objectStoreNames.contains(os) and os != "logs" and os != "shape_set")
        shape_sets = []
        t = @idb.db.transaction(stores.concat(["shape_set"]), "readwrite")
        callback = callback or (()->null)
        if determined # seems to skirt random errors, not entirely sure why, maybe chrome's memory management.
          t.onerror = (e) => 
            setTimeout (()=>@idb.load_everything(callback, false)), 100
            console.log "caught error:"; console.log e
        else 
          console.log "second time"
          t.onerror = (e) =>
            console.log "caught error:"; console.log e
            callback()
        t.oncomplete = () =>
          @idb.loaded = true
          # this is quite a clever pattern if i may say so myself
          return false unless callback
          
          exec_cb_stack = (stack) =>
            cb = () =>
              stack.pop() cb if stack.length
            stack.pop() cb
          
          ssids = (ssid for ssid of @s3)

          stack = [callback]
          
          # something truly bizare happens around here somewhere, but it doesn't seem to matter !?!?!
          for ssid of @s3
            new_func = ((ssid)=>((cb) => @idb.load_s3(ssid,cb)))(ssids.shift())
            stack.push new_func
          
          exec_cb_stack stack

        creq = t.objectStore("shape_set").openCursor()
        creq.onsuccess = (e) =>
          csr = e.target.result
          if csr and (ssid = csr.key) and (result = csr.value)
            this.init_ss(ssid)
            os = result.type
            delete result['type']
            delete result['ssid']
            @s3[ssid][attr] = result[attr] for attr of result
            csr.continue()
      
      clear: () -> 0
    
  
  fetch_defaults: (callback) ->
    $.ajax
      url: "/vdata"
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) -> console.log "AJAX Error: " + textStatus
      success: (data, textStatus, jqXHR) =>
        this.cache_shape_set data.default_shape_set        
        callback(data, textStatus, jqXHR)
  
  cache_shape_set: (ss) ->
    this.init_ss(ss.id)
    @s3[ss.id].id ?= ss.id
    @s3[ss.id].name ?= ss.name
    @s3[ss.id].radius ?= ss.radius
    @s3[ss.id].center_point ?= ss.center_point  
  
  cache_perspective: (p,ss) ->
    p_def = 
      id: p.id or 'lp'+Date.now() # loaded perspective
      name: p.name
      style_set: p.style_set
      height: p.height
      angle: p.angle
      distance: p.distance
      regions: p.regions
    @s3[ss].perspectives[p_def.id] = p_def
    return p_def.id
  
  fetch_shape_set: (shape_set_id,callback,cascade) ->
    this.fetch_start()
    console.log "/vdata/#{shape_set_id}"
    $.ajax
      url: "/vdata/#{shape_set_id}"
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) ->
        console.log "AJAX Error: " + textStatus
        this.fetch_end(shape_set_id, ["shape_set"])
      success: (data, textStatus, jqXHR) =>
        this.cache_shape_set(data)        
        this.fetch_end(shape_set_id, ["shape_set"])
  
  fetch_perspective: (shape_set_id, perspective_id, callback) ->  this.fetch_perspectives(shape_set_id, [perspective_id], callback)
  
  fetch_perspectives: (shape_set_id, perspective_ids, callback) ->
    this.fetch_start()
    console.log "/vdata/#{shape_set_id}/p:#{perspective_ids.join(",")}"
    $.ajax
      url: "/vdata/#{shape_set_id}/p:#{perspective_ids.join(",")}"
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) ->
        console.log "AJAX Error: " + textStatus
        this.fetch_end(shape_set_id, ["perspectives"])
      success: (data, textStatus, jqXHR) =>
        for p_id of data
          @s3[shape_set_id].perspectives[p_id]  ?= {}
          for attr in ['id', 'name', 'version', 'style_set', 'height', 'angle', 'distance', 'regions']
            @s3[shape_set_id].perspectives[p_id][attr] = data[p_id][attr]
        this.fetch_end(shape_set_id, ["perspectives"])
        callback(data, textStatus, jqXHR)
      
  verify_region: (shape_set_id, region_id) ->
    return false unless @s3 and @s3[shape_set_id] and @s3[shape_set_id].regions and 
      @s3[shape_set_id].shapes and @s3[shape_set_id].meshes and @s3[shape_set_id].regions[region_id] and 
      @s3[shape_set_id].regions[region_id].id and @s3[shape_set_id].regions[region_id].shapes
    for shape_id in @s3[shape_set_id].regions[region_id].shapes
      return false unless @s3[shape_set_id].shapes[shape_id] and @s3[shape_set_id].shapes[shape_id].meshes
      for mesh_id in @s3[shape_set_id].shapes[shape_id].meshes
        return false unless @s3[shape_set_id].meshes[mesh_id]
    true

  fetch_regions: (shape_set_id, region_ids, callback) ->
    this.fetch_start()
    exclude = (mesh_id for mesh_id of @s3[shape_set_id].meshes)
    region_ids = (rid for rid in region_ids when not this.verify_region(shape_set_id,rid))
    return callback() unless region_ids.length
    url = "/vdata/#{shape_set_id}/r:#{region_ids.join(",")}?full=t"
    url += "&excl=#{exclude.join(",")}" if exclude.length
    console.log url
    $.ajax
      type: 'get'
      url:  url
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) ->
        console.log "AJAX Error: " + textStatus
        this.fetch_end(shape_set_id, [])
      success: (data, textStatus, jqXHR) =>
        if "regions" of data
          regions = (data["regions"][r] for r of data["regions"])
          meshes = data["meshes"]
        else
          regions = (data[r] for r of data)
        
        for region in regions
          @s3[shape_set_id].regions[region.id] ?= {}
          for attr in ['id', 'name', 'version', 'decompositions', 'thing']
            @s3[shape_set_id].regions[region.id][attr] = region[attr]
          @s3[shape_set_id].regions[region.id].shapes = []
          if typeof(region.shapes[0]) is 'number'
            @s3[shape_set_id].regions[region.id].shapes.push shape_id for shape_id in region.shapes
          else
            for shape in region.shapes
              @s3[shape_set_id].regions[region.id].shapes.push shape.id
              @s3[shape_set_id].shapes[shape.id] ?= {}
              for attr in ['id','volume_value', 'name']
                @s3[shape_set_id].shapes[shape.id][attr] = shape[attr]
              @s3[shape_set_id].shapes[shape.id].meshes = [] # have to overwrite here to avoid duplication!
              @s3[shape_set_id].shapes[shape.id].meshes.push mesh_id for mesh_id in shape["meshes"]
            
        for mesh in meshes
          @s3[shape_set_id].meshes[mesh.id] ?= {}
          for attr in ['id', 'name', 'vertex_positions', 'vertex_normals', 'faces', 'borders']
            @s3[shape_set_id].meshes[mesh.id][attr] = mesh[attr]
        
        this.fetch_end(shape_set_id, ["regions","shapes","meshes"])
        callback(data, textStatus, jqXHR)
  	
  init_ss: (ssid) ->
    @s3[ssid] ?= {}
    @s3[ssid].perspectives ?= {}
    @s3[ssid].meshes ?= {}
    @s3[ssid].shapes ?= {}
    @s3[ssid].regions ?= {}
  