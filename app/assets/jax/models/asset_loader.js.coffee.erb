Jax.getGlobal()['AssetLoader'] = Jax.Model.create
  after_initialize: ->
    # this model is responsible for finding, fetching and returning requested meshes, regions, descriptions, indexes etc
    # particularly in service of scene and region
    # also responsible for local caching of assets
    # can bundle assets into a single request to the server to reduce overhead
    window.JAS = {} # create jax asset store
    
  
  region_set2region_descs: (json_data) ->
    regions = []
    meshes = {}
    console.log "-"
    for region in json_data["regions"]
      new_region = []
      shape_vids = (shape["volume_value"] for shape in region["shapes"])
      for shape in region["shapes"]
        for mesh in shape["meshes"]
          bf = mesh["name"].split("-")
          if (bf[0] in shape_vids) or (bf[1] in shape_vids)
            mesh_id = parseInt(mesh["id"])
            meshes[mesh_id] = mesh if mesh["included"] == "yes"
            new_region.push mesh_id
      regions.push new_region
    ((meshes[mesh_id] for mesh_id in region) for region in regions)
  
  fetch_default_region_set: (callback, excludes) ->
    params = 
      excludes: excludes
      requests: [
        type:"region_set"
        id:"default"
        cascade:"yes"
      ]
    this.fetch params, (data, textStatus, jqXHR) -> callback(data[0], textStatus, jqXHR)
      
  test_fetch: () ->
    test_fetch_params = 0#{shape_set:4, exclude:[13,14], requests: [{type:"shape",id:1,cascade:"yes"}]}
    this.fetch test_fetch_params,
      (data, textStatus, jqXHR) -> console.log (data)
      
  fetch: (params, callback) ->
    # params = {shape_set: #, include:[], exclude:[], cascade:flag, requests: {}}
    url = @jax_data_path
    url += "/" + params.shape_set if params.shape_set
    url += "?" if params.include or params.exclude or params.requests or params.cascade
    if params.include and params.include.length
      url += "include=" + params.include + "&"
    else if params.exclude and params.exclude.length
      url += "exclude=" + params.exclude + "&"
    if params.requests
      url += "requests=" + encodeURIComponent(JSON.stringify(params.requests))
    else if params.cascade
      url += "cascade=" + params.cascade
    console.log url
    $.ajax
      url: url
      dataType: 'json'
      error: (jqXHR, textStatus, errorThrown) -> console.log "AJAX Error: " + textStatus
      success: (data, textStatus, jqXHR) -> callback(data, textStatus, jqXHR)
